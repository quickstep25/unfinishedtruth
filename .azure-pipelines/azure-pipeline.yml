# azure-pipelines.yml

pr:
  branches:
    include:
    - master
  paths:
    include:
    - "*"
  drafts: false

variables:
- group: varGITHUB
- group: varDREAMHOST

pool:
  vmImage: ubuntu-latest

stages:
- stage: Build
  displayName: Build and Package Artifact
  jobs:
  - job: build_job
    displayName: Build Site
    steps:
    - task: NodeTool@0
      displayName: Install Node.js 20.x
      inputs:
        versionSpec: "20.x"
    - script: |
        npm install
        npm run clean || echo "no clean script"
        npm run build
      displayName: Install Dependencies and Build

    - bash: |
        PKG_VERSION=$(node -p "require('./package.json').version")
        echo "Detected package.json version: $PKG_VERSION"
        echo "##vso[build.updatebuildnumber]$PKG_VERSION-$(Build.SourceBranchName)-$(Build.BuildId)"
      displayName: set Version number from package.json

    - task: PublishBuildArtifacts@1
      displayName: "Publish Build Distribution as Artifact"
      inputs:
        PathtoPublish: "www/dist"
        ArtifactName: "Artifact_UnfinishedTruth"
        publishLocation: "Container"
- stage: Deploy
  displayName: Deploy to Dreamhost
  dependsOn: Build
  condition: succeeded()
  jobs:
  - deployment: deploy_to_dreamhost
    displayName: Upload to SFTP
    environment: "Production"
    strategy:
      runOnce:
        deploy:
          steps:
          - download: current
            artifact: "Artifact_UnfinishedTruth"
          - bash: |
              sudo apt-get update -y
              sudo apt-get install -y lftp
            displayName: Install LFTP

          - bash: |
              set -e
              LOCAL_DIR="$(Pipeline.Workspace)/Artifact_UnfinishedTruth"
              echo "Local dir: $LOCAL_DIR"
              echo "Remote dir: $(FTP_REMOTE_DIR)"

              lftp -u "$(FTP_USERNAME)","$(FTP_PASSWORD)" sftp://$(FTP_HOST) -p ${FTP_PORT:-22} -e "
                set net:max-retries 2;
                set net:timeout 20;
                set sftp:auto-confirm yes;

                rm -r $(FTP_REMOTE_DIR)/*;
                mirror -R --parallel=4 --delete --verbose $LOCAL_DIR $(FTP_REMOTE_DIR);
                bye
              "
            displayName: SFTP Mirror Upload

- stage: ReleaseNotes
  displayName: Generate Release Notes
  dependsOn: Deploy
  condition: succeeded()
  jobs:
  - job: notes
    displayName: Create and Publish Notes
    steps:
    - task: XplatGenerateReleaseNotes@4
      displayName: Generate Markdown Release Notes
      inputs:
        outputfile: "$(Build.SourcesDirectory)/release-notes.md"
        templateLocation: "inline"
        template: |
          ## Release Notes - $(Build.SourceBranchName) - $(Build.BuildNumber)

          **Build**: [$(Build.BuildNumber)]($(System.CollectionUri)$(System.TeamProject)/_build/results?buildId=$(Build.BuildId))
          
          ### Pull Requests
          {{#forEach pullRequests}}
          - {{this.id}} {{this.title}} ({{this.repository.name}}) by {{this.createdBy.displayName}}
            {{#if this.associatedWorkItems}}
              {{#forEach this.associatedWorkItems}}
              - AB#{{this.id}} {{this.fields["System.Title"]}}
              {{/forEach}}
            {{/if}}
          {{/forEach}}

          ### Work Items
          {{#forEach workItems}}
          - AB#{{this.id}} {{this.fields["System.WorkItemType"]}}: {{this.fields["System.Title"]}}
          {{/forEach}}

        searchCrossProjectForBuilds: false
        replaceFile: true
        getParentsAndChildren: false
        stopOnRedeploy: false

    - task: PublishBuildArtifacts@1
      displayName: Publish Release Notes
      inputs:
        PathtoPublish: "$(Build.SourcesDirectory)/release-notes.md"
        ArtifactName: "Release_Notes"
        publishLocation: "Container"